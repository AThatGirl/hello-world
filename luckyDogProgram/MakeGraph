package javaProjects.年会抽奖系统;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.*;
import java.util.List;

public class MakeGraph{
    //设置一个Map,将获奖的数据放入
    private Map<AllPrize,String> resultMap=new LinkedHashMap<>();
    //创建黑名单类的对象
    Blacklist blacklist=new Blacklist();
    //把抽到的人记录到list集合下次保证不抽到
    private List<String> list=new ArrayList<>();
    //设置一个标记和主窗口frame
    private int addPrizeFlag=StaticVariate.END_ADD_PRIZE;
    private int actionFlag=StaticVariate.FIRST_TIME;
    private int blacklistFlag=StaticVariate.NULL_BLACKLIST;
    private int printFlag=StaticVariate.NULL_PRINT;
    private int databaseFlag=StaticVariate.END_SQL_OPERATE;
    private JFrame jFrame=new JFrame("随机抽取获奖名单");
    //创建Panel容器
    private JPanel addPrizePanel=new JPanel();
    private JPanel actionPanel=new JPanel();
    private JPanel blacklistPanel=new JPanel();
    private JPanel printPanel=new JPanel();
    private JPanel databasePanel=new JPanel();
    //创建文本和按钮
    private JTextField addPrizeText=new JTextField();
    private JTextField tf=new JTextField();
    private JTextField nameText=new JTextField();
    private JTextArea resultArea=new JTextArea(3,1);
    private JButton addPrizeButton=new JButton("奖项数确认");
    private JButton runButton=new JButton("开始");
    private JButton stopButton=new JButton("停止");
    private JButton exitButton=new JButton("退出");
    private JButton addBlacklistButton=new JButton("加入黑名单");
    private JButton delBlacklistButton=new JButton("移出黑名单");
    private JButton printMapButton=new JButton("打印获奖人员");
    private JButton printBlacklistButton=new JButton("打印黑名单");
    private JButton insDatabaseButton=new JButton("增加人员");
    private JButton delDatabaseButton=new JButton("删除人员");
    private JButton updDatabaseButton=new JButton("修改人员");
    private JButton selDatabaseButton=new JButton("查询人员");
    //创建label标签
    private JLabel addPrizeLabel=new JLabel("依次输入奖项数 ");
    private JLabel tfLabel=new JLabel("获奖人员   ");
    private JLabel nameLabel=new JLabel("名单操作   ");
    //创建滚轮，将resultArea传入
    JScrollPane jScrollPane=new JScrollPane(resultArea);
    //开始制作图
    public MakeGraph() throws SQLException {
        //设置jTextField的大小和jFrame布局方式
        tf.setPreferredSize(new Dimension(300,100));
        jFrame.setLayout(new FlowLayout());
        nameText.setPreferredSize(new Dimension(300,50));
        resultArea.setPreferredSize(new Dimension(1000,1000));
        jScrollPane.setPreferredSize(new Dimension(300,300));
        //设置jTextField和label内容的字体和大小
        addPrizeText.setFont(new Font("宋体",Font.PLAIN,30));
        tf.setFont(new Font("宋体",Font.PLAIN,70));//plain普通的
        nameText.setFont(new Font("宋体",Font.PLAIN,50));
        addPrizeLabel.setFont(new Font("宋体",Font.PLAIN,22));
        tfLabel.setFont(new Font("宋体",Font.PLAIN,30));
        nameLabel.setFont(new Font("宋体",Font.PLAIN,30));
        resultArea.setFont(new Font("宋体",Font.PLAIN,30));
        //给结果文本设置滚轮
        jScrollPane.setViewportView(resultArea);//关键，把resultArea组件放入滚动面板里面
        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //将按钮和文本放入容器
        addPrizePanel.add(addPrizeButton);
        actionPanel.add(runButton);
        actionPanel.add(stopButton);
        actionPanel.add(exitButton);
        blacklistPanel.add(addBlacklistButton);
        blacklistPanel.add(delBlacklistButton);
        printPanel.add(printMapButton);
        printPanel.add(printBlacklistButton);
        databasePanel.add(insDatabaseButton);
        databasePanel.add(delDatabaseButton);
        databasePanel.add(updDatabaseButton);
        databasePanel.add(selDatabaseButton);
        //创建一个垂直拼接的Box,拼接按钮
        Box verticalButtonBox = Box.createVerticalBox();
        verticalButtonBox.add(addPrizePanel);
        verticalButtonBox.add(actionPanel);
        verticalButtonBox.add(blacklistPanel);
        verticalButtonBox.add(printPanel);
        verticalButtonBox.add(databasePanel);
        //创建一个垂直和水平拼接的Box，拼接Text和标签
        Box verticalTextBox = Box.createVerticalBox();
        Box horizontalBox1 = Box.createHorizontalBox();
        Box horizontalBox2= Box.createHorizontalBox();
        Box horizontalBox0= Box.createHorizontalBox();
        horizontalBox0.add(addPrizeLabel);
        horizontalBox0.add(addPrizeText);
        horizontalBox1.add(tfLabel);
        horizontalBox1.add(tf);
        horizontalBox2.add(nameLabel);
        horizontalBox2.add(nameText);
        verticalTextBox.add(horizontalBox0);
        verticalTextBox.add(horizontalBox1);
        verticalTextBox.add(horizontalBox2);
        //将这两个盒子和滚轮放入jFrame
        jFrame.add(verticalTextBox);
        jFrame.add(verticalButtonBox);
        jFrame.add(jScrollPane);
        //获取屏幕的长和宽
        int screenWidth= Toolkit.getDefaultToolkit().getScreenSize().width;
        int screenHeight=Toolkit.getDefaultToolkit().getScreenSize().height;
        //设置组件的大小和位置和大小和设置可见和不可变
        jFrame.setLocation(screenWidth/2-250,screenHeight/2-450);
        jFrame.setSize(650,740);
        jFrame.setResizable(false);
        jFrame.setVisible(true);
        //设置点击X的时候程序结束
        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //增加事件监听器
        addListener();
    }
    //为暂停和开始按钮增加事件监听器
    private void addListener(){
        runButton.addActionListener(listener);
        stopButton.addActionListener(listener);
        exitButton.addActionListener(listener);
        addBlacklistButton.addActionListener(listener);
        delBlacklistButton.addActionListener(listener);
        printMapButton.addActionListener(listener);
        printBlacklistButton.addActionListener(listener);
        addPrizeButton.addActionListener(listener);
        insDatabaseButton.addActionListener(listener);
        delDatabaseButton.addActionListener(listener);
        updDatabaseButton.addActionListener(listener);
        selDatabaseButton.addActionListener(listener);
    }
    //创建事件监听器
    ActionListener listener=new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            //获取事件对象
            Object obj=e.getSource();
            if (obj==addPrizeButton){
                addPrizeFlag=StaticVariate.ADD_PRIZE_NUMBER;
            }
            if (obj==runButton){
                    actionFlag = StaticVariate.RUN_BUTTON;
            }
            if (obj == stopButton) {
                    actionFlag = StaticVariate.STOP_BUTTON;
            }
            if (obj==exitButton){
                actionFlag=StaticVariate.EXIT_BUTTON;
            }
            if (obj==addBlacklistButton){
                blacklistFlag=StaticVariate.ADD_BLACKLIST;
            }
            if(obj==delBlacklistButton){
                blacklistFlag=StaticVariate.DEL_BLACKLIST;
            }
            if(obj==printMapButton){
                printFlag=StaticVariate.MAP_PRINT;
            }
            if(obj==printBlacklistButton){
                printFlag=StaticVariate.BLACKLIST_PRINT;
            }
            if(obj==insDatabaseButton)databaseFlag=StaticVariate.INS_DATABASE_MESSAGE;
            if(obj==delDatabaseButton)databaseFlag=StaticVariate.DEL_DATABASE_MESSAGE;
            if(obj==updDatabaseButton)databaseFlag=StaticVariate.UPD_DATABASE_MESSAGE;
            if(obj==selDatabaseButton)databaseFlag=StaticVariate.SEL_DATABASE_MESSAGE;
        }
    };
    //记录要运行的次数
    int prizeSum=0;
    int[] number=new int[3];
    public int getPrizeSum(){
        int i=0;
        Object[] obj=addPrizeText.getText().split("\\s+");
        for (Object o : obj) {
            if(i>=3||o=="")break;
            number[i]=Integer.parseInt(String.valueOf(o));
            prizeSum+=number[i];
            i++;
        }
        return prizeSum;
    }
    public  void run() {

        while (true){
            try {
                if(addPrizeFlag==StaticVariate.ADD_PRIZE_NUMBER&&sumNumber!=0){
                    getPrizeSum();
                    addPrizeText.setText("添加成功!");
                    Thread.sleep(1000);
                    addPrizeText.setText("");
                    addPrizeFlag=StaticVariate.END_ADD_PRIZE;
                }
                String name = getDatabaseMessage();
                if (StaticVariate.DOING_COUNT<prizeSum) {
                    if (actionFlag == StaticVariate.RUN_BUTTON) {
                        tf.setText(name);
                    }
                    if (actionFlag == StaticVariate.STOP_BUTTON) {
                        if (!list.contains(name)) {
                            list.add(name);
                            if(number[0]>0){
                                addFirstPrizeMap(name);
                                number[0]--;
                            }else if(number[1]>0){
                                addSecondPrizeMap(name);
                                number[1]--;
                            }else if (number[2]>0){
                                addThirdPrize(name);
                                number[2]--;
                            }else ;
                            StaticVariate.DOING_COUNT++;
                            tf.setText(name);
                        } else continue;
                        actionFlag = StaticVariate.NULL_ACTION;
                    }
                    if (actionFlag == StaticVariate.FIRST_TIME) {
                        tf.setText("准备抽奖");
                    }
                    if (actionFlag == StaticVariate.EXIT_BUTTON) break;
                }
                //手动输入加入或移除黑名单的名称
                if(blacklistFlag==StaticVariate.ADD_BLACKLIST){
                    addBlacklist(blacklist,nameText.getText());
                    blacklistFlag=StaticVariate.NULL_BLACKLIST;
                }
                if (blacklistFlag==StaticVariate.DEL_BLACKLIST){
                    delBlacklist(blacklist,nameText.getText());

                    blacklistFlag=StaticVariate.NULL_BLACKLIST;
                }
                if(printFlag==StaticVariate.MAP_PRINT){
                    printMap();
                    printFlag=StaticVariate.NULL_PRINT;
                }
                if (printFlag==StaticVariate.BLACKLIST_PRINT){
                    printBlacklist(blacklist);
                    printFlag=StaticVariate.NULL_PRINT;
                }
                //数据库的增删改查
                if(databaseFlag==StaticVariate.INS_DATABASE_MESSAGE){
                    String dataName=nameText.getText();
                    if (dataName!=null&&dataName!="") {
                        insDatabaseMessage(dataName);
                        nameText.setText("增加成功");
                        Thread.sleep(1000);
                        nameText.setText("");
                    }else {
                        nameText.setText("增加失败");
                        Thread.sleep(1000);
                        nameText.setText("");
                    }
                    databaseFlag=StaticVariate.END_SQL_OPERATE;
                }
                if (databaseFlag==StaticVariate.DEL_DATABASE_MESSAGE){
                    if (nameText.getText()!=null&&delDatabaseMessage(nameText.getText())) {
                        nameText.setText("删除成功");
                        Thread.sleep(1000);
                        nameText.setText("");
                    }else {
                        nameText.setText("没有该人员");
                        Thread.sleep(1000);
                        nameText.setText("");
                    }
                    databaseFlag=StaticVariate.END_SQL_OPERATE;
                }
                if(databaseFlag==StaticVariate.UPD_DATABASE_MESSAGE){
                    if (nameText.getText()!=null&&nameText.getText()!=""&&nameText.getText().contains(" ")) {
                        String[] str = nameText.getText().split("\\s+");
                        boolean b=false;
                        if (str.length==2)
                        b=updDatabaseMessage(str[0], str[1]);
                        if (b) {
                            nameText.setText("修改成功");
                            Thread.sleep(1000);
                            nameText.setText("");
                        } else{
                            nameText.setText("修改失败");
                            Thread.sleep(1000);
                            nameText.setText("");
                        }
                    }
                    databaseFlag=StaticVariate.END_SQL_OPERATE;
                }
                if(databaseFlag==StaticVariate.SEL_DATABASE_MESSAGE){
                    if (nameText.getText()!=null||nameText.getText()!="") {
                        if(selDatabaseMessage(nameText.getText())){

                        }else {
                            nameText.setText("查找失败");
                            Thread.sleep(1000);
                            nameText.setText("");
                        }
                    }
                    databaseFlag=StaticVariate.END_SQL_OPERATE;
                }
            }catch (Exception e){
                e.printStackTrace();
            }

        }
    }
    //往map集合里面增加数据
    public void addFirstPrizeMap(String name){
            resultMap.put(new FirstPrize(),name);
    }
    public void addSecondPrizeMap(String name){
            resultMap.put(new SecondPrize(),name);
    }
    public void addThirdPrize(String name){
            resultMap.put(new ThirdPrize(),name);
    }
    //往黑名单里面增加数据
    public void addBlacklist(Blacklist blacklist,String name) throws InterruptedException {
        nameText.setText("添加成功!");
        Thread.sleep(1000);
        nameText.setText("");
        blacklist.addBlacklist(name);
    }
    //移除黑名单
    public void delBlacklist(Blacklist blacklist,String name) throws InterruptedException {
        if(blacklist.getBlacklist().contains(name)){
            nameText.setText("删除成功!");
            Thread.sleep(1000);
            nameText.setText("");
            blacklist.delBlacklist(name);
        }else {
            nameText.setText("没有该人员！");
            Thread.sleep(1000);
            nameText.setText("");
        }
    }
    //打印获奖名单Map
    public  void printMap(){
        resultArea.append("获奖名单：\r\n");
        for (AllPrize allPrize : resultMap.keySet()) {
            resultArea.append(allPrize.getString()+":"+resultMap.get(allPrize)+"\r\n");
        }
    }
    //打印出黑名单的内容
    public void printBlacklist(Blacklist blacklist){
        //迭代器迭代输出
        resultArea.append("黑名单：\r\n");
        Iterator<String> iterator=blacklist.getBlacklist().iterator();
        while (iterator.hasNext()){
            resultArea.append(iterator.next()+"\r\n");
        }
    }
    //数据库的增删改查
    public int getSumNumber() throws SQLException {
        Connection conn=SqlOperate.getConnection();
        String sql="select count(*) from player";
        PreparedStatement pst=conn.prepareStatement(sql);
        ResultSet resultSet=pst.executeQuery();
        int sum=0;
        while (resultSet.next()){
            sum=resultSet.getInt(1);
        }
        return sum;
    }
    int sumNumber=getSumNumber();
    public void insDatabaseMessage(String name) throws SQLException{
        Connection conn=SqlOperate.getConnection();
        String sql="insert into player value(?,?)";
        PreparedStatement pst=conn.prepareStatement(sql);
        pst.setInt(1,sumNumber);
        pst.setString(2,name);
        pst.executeUpdate();
        sumNumber++;
        SqlOperate.closeAll(null,pst,conn);
    }
    public boolean delDatabaseMessage(String name) throws SQLException {
        Connection conn=SqlOperate.getConnection();
        String sql="delete from player where name=?";
        PreparedStatement pst=conn.prepareStatement(sql);
        pst.setString(1,name);
        int resultSet=pst.executeUpdate();
        sumNumber--;
        SqlOperate.closeAll(null,pst,conn);
        return resultSet!=0;
    }
    public boolean updDatabaseMessage(String name1,String name2) throws SQLException {
        Connection conn= SqlOperate.getConnection();
        String sql="update player set name=? where name=? ";
        PreparedStatement pst=conn.prepareStatement(sql);
        pst.setString(1,name2);
        pst.setString(2,name1);
        int res=pst.executeUpdate();
        SqlOperate.closeAll(null,pst,conn);
        return res!=0;
    }
    public boolean selDatabaseMessage(String name) throws SQLException {
        Connection conn=SqlOperate.getConnection();
        String sql="select * from player where name=?";
        PreparedStatement pst=conn.prepareStatement(sql);
        pst.setString(1,name);
        ResultSet resultSet=pst.executeQuery();
        String res="";
        while (resultSet.next()){
            res=resultSet.getString("name");
            System.out.println(res+111);
            nameText.setText(resultSet.getInt("number")+":"+resultSet.getString("name"));
        }
        return res.equals(name);
    }
    public String getDatabaseMessage() throws SQLException {
        Connection conn=SqlOperate.getConnection();
        String sql="select name from player where number=?";
        //让PrepareStatement对象初始化sql语句
        PreparedStatement pst=conn.prepareStatement(sql);
        //设置一个Random对象，获取0-19的随机值
        Random myRandom=new Random();
        int rn=myRandom.nextInt(sumNumber);
        //将sql语句第一个?赋值
        pst.setInt(1,rn);
        //用结果集接收,遍历赋值给name
        ResultSet resultSet = pst.executeQuery();
        String name=null;
        while (resultSet.next()) {
            name=resultSet.getString("name");
        }
        //释放资源
        SqlOperate.closeAll(resultSet,pst,conn);
        return name;
    }
}
